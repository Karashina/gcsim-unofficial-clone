// Code generated by "pipeline"; DO NOT EDIT.
package mizuki

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	3: {"travel"},
	5: {"collision"},
	6: {"collision"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Mizuki, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			if v == "movement" {
				return nil
			}
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}

var (
	attack = [][]float64{
		attack_1,
		attack_2,
		attack_3,
	}
)

var (
	// attack: attack_1 = [0]
	attack_1 = []float64{
		0.523,
		0.562225,
		0.60145,
		0.65375,
		0.692975,
		0.7322,
		0.7845,
		0.8368,
		0.8891,
		0.9414,
		0.9937,
		1.046,
		1.111375,
		1.111375,
		1.111375,		
	}
	// attack: attack_2 = [1]
	attack_2 = []float64{
		0.469,
		0.504175,
		0.53935,
		0.58625,
		0.621425,
		0.6566,
		0.7035,
		0.7504,
		0.7973,
		0.8442,
		0.8911,
		0.938,
		0.996625,
		0.996625,
		0.996625,		
	}
	// attack: attack_3 = [2]
	attack_3 = []float64{
		0.714,
		0.76755,
		0.8211,
		0.8925,
		0.94605,
		0.9996,
		1.071,
		1.1424,
		1.2138,
		1.2852,
		1.3566,
		1.428,
		1.51725,
		1.51725,
		1.51725,		
	}
	// attack: charge = [3]
	charge = []float64{
		1.3,
		1.3975,
		1.495,
		1.625,
		1.7225,
		1.82,
		1.95,
		2.08,
		2.21,
		2.34,
		2.47,
		2.6,
		2.7625,
		2.7625,
		2.7625,		
	}
	// attack: collision = [6]
	collision = []float64{
		0.568288,
		0.614544,
		0.6608,
		0.72688,
		0.773136,
		0.826,
		0.898688,
		0.971376,
		1.044064,
		1.12336,
		1.202656,
		1.281952,
		1.361248,
		1.440544,
		1.51984,
	}
	// attack: highPlunge = [8]
	highPlunge = []float64{
		1.419344,
		1.534872,
		1.6504,
		1.81544,
		1.930968,
		2.063,
		2.244544,
		2.426088,
		2.607632,
		2.80568,
		3.003728,
		3.201776,
		3.399824,
		3.597872,
		3.79592,
	}
	// attack: lowPlunge = [7]
	lowPlunge = []float64{
		1.136335,
		1.228828,
		1.32132,
		1.453452,
		1.545944,
		1.65165,
		1.796995,
		1.94234,
		2.087686,
		2.246244,
		2.404802,
		2.563361,
		2.721919,
		2.880478,
		3.039036,
	}
	// skill: skill = [0]
	skill = []float64{
		0.577,
		0.620275,
		0.66355,
		0.72125,
		0.764525,
		0.8078,
		0.8655,
		0.9232,
		0.9809,
		1.0386,
		1.0963,
		1.154,
		1.226125,
		1.226125,
		1.226125,		
	}
	// skill: skillDot = [1]
	skillDot = []float64{
		0.449,
		0.482675,
		0.51635,
		0.56125,
		0.594925,
		0.6286,
		0.6735,
		0.7184,
		0.7633,
		0.8082,
		0.8531,
		0.898,
		0.954125,
		0.954125,
		0.954125,		
	}
	// skill: skillBuff = [2]
	skillBuff = []float64{
		0.0018,
		0.0021,
		0.0024,
		0.0027,
		0.0030,
		0.0033,
		0.0036,
		0.0039,
		0.0042,
		0.0045,
		0.0048,
		0.0051,
		0.0054,
		0.0054,
		0.0054,			
	}
	// burst: burst = [0]
	burst = []float64{
		0.941,
		1.011575,
		1.08215,
		1.17625,
		1.246825,
		1.3174,
		1.4115,
		1.5056,
		1.5997,
		1.6938,
		1.7879,
		1.882,
		1.999625,
		1.999625,
		1.999625,		
	}
	// burstSnack: burst = [0]
	burstSnack = []float64{
		0.706,
		0.75895,
		0.8119,
		0.8825,
		0.93545,
		0.9884,
		1.059,
		1.1296,
		1.2002,
		1.2708,
		1.3414,
		1.412,
		1.50025,
		1.50025,
		1.50025,		
	}
	// burstHeal: burst = [2]
	burstHeal = []float64{
		1.306,
		1.40395,
		1.5019,
		1.6325,
		1.73045,
		1.8284,
		1.959,
		2.0896,
		2.2202,
		2.3508,
		2.4814,
		2.612,
		2.77525,
		2.77525,
		2.77525,		
	}
	// burstHealC: burst = [3]
	burstHealC = []float64{
		315,
		346.5,
		380.52,
		417.375,
		456.75,
		498.645,
		543.375,
		590.625,
		640.395,
		693,
		748.125,
		806.085,
		866.25,
		866.25,
		866.25,		
	}
)
