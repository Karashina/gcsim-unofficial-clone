// Code generated by "pipeline"; DO NOT EDIT.
package ifa

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	2: {"travel"},
	3: {"travel"},
	4: {"travel","Hold"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Ifa, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			if v == "movement" {
				return nil
			}
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}

var (
	attack = [][]float64{
		attack_1,
		attack_2,
		attack_3,
	}
)

var (
	// attack: attack_1 = [0]
	attack_1 = []float64{
		0.536,
		0.5762,
		0.6164,
		0.67,
		0.7102,
		0.7504,
		0.804,
		0.8576,
		0.9112,
		0.9648,
		1.0184,
		1.072,
		1.139,
		1.139,
		1.139,		
	}
	// attack: attack_2 = [1]
	attack_2 = []float64{
		0.475,
		0.510625,
		0.54625,
		0.59375,
		0.629375,
		0.665,
		0.7125,
		0.76,
		0.8075,
		0.855,
		0.9025,
		0.95,
		1.009375,
		1.009375,
		1.009375,		
	}
	// attack: attack_3 = [2]
	attack_3 = []float64{
		0.748,
		0.8041,
		0.8602,
		0.935,
		0.9911,
		1.0472,
		1.122,
		1.1968,
		1.2716,
		1.3464,
		1.4212,
		1.496,
		1.5895,
		1.5895,
		1.5895,		
	}
	// attack: charge = [4]
	charge = []float64{
		1.47,
		1.58025,
		1.6905,
		1.8375,
		1.94775,
		2.058,
		2.205,
		2.352,
		2.499,
		2.646,
		2.793,
		2.94,
		3.12375,
		3.12375,
		3.12375,		
	}
	// attack: collision = [8]
	collision = []float64{
		0.568288,
		0.614544,
		0.6608,
		0.72688,
		0.773136,
		0.826,
		0.898688,
		0.971376,
		1.044064,
		1.12336,
		1.202656,
		1.281952,
		1.361248,
		1.440544,
		1.51984,
	}
	// attack: highPlunge = [10]
	highPlunge = []float64{
		1.419344,
		1.534872,
		1.6504,
		1.81544,
		1.930968,
		2.063,
		2.244544,
		2.426088,
		2.607632,
		2.80568,
		3.003728,
		3.201776,
		3.399824,
		3.597872,
		3.79592,
	}
	// attack: lowPlunge = [9]
	lowPlunge = []float64{
		1.136335,
		1.228828,
		1.32132,
		1.453452,
		1.545944,
		1.65165,
		1.796995,
		1.94234,
		2.087686,
		2.246244,
		2.404802,
		2.563361,
		2.721919,
		2.880478,
		3.039036,
	}
	// skill: tonicshot = [0]
	tonicshot = []float64{
		1.334,
		1.43405,
		1.5341,
		1.6675,
		1.76755,
		1.8676,
		2.001,
		2.1344,
		2.2678,
		2.4012,
		2.5346,
		2.668,
		2.83475,
		2.83475,
		2.83475,		
	}
	// skill: skillHealPct = [1]
	skillHealPct = []float64{
		0.202,
		0.21715,
		0.2323,
		0.2525,
		0.26765,
		0.2828,
		0.303,
		0.3232,
		0.3434,
		0.3636,
		0.3838,
		0.404,
		0.42925,
		0.42925,
		0.42925,		
	}
	// skill: skillHeacCst = [2]
	skillHealCst = []float64{
		48.1,
		52.91,
		58.1048,
		63.7325,
		69.745,
		76.1423,
		82.9725,
		90.1875,
		97.7873,
		105.82,
		114.2375,
		123.0879,
		132.275,
		132.275,
		132.275,		
	}
	// burst: burst = [0]
	burst = []float64{
		5.085,
		5.466375,
		5.84775,
		6.35625,
		6.737625,
		7.119,
		7.6275,
		8.136,
		8.6445,
		9.153,
		9.6615,
		10.17,
		10.805625,
		10.805625,
		10.805625,		
	}
	// burst: sedationmark = [2]
	sedationmark = []float64{
		1.09,
		1.17175,
		1.2535,
		1.3625,
		1.44425,
		1.526,
		1.635,
		1.744,
		1.853,
		1.962,
		2.071,
		2.18,
		2.31625,
		2.31625,
		2.31625,		
	}
)
