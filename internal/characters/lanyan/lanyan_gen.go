// Code generated by "pipeline"; DO NOT EDIT.
package lanyan

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	1: {"hold"},
	4: {"travel"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Lanyan, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}

var (
	attack = [][][]float64{
		{attack_1},
		attack_2,
		attack_3,
		{attack_4},
	}
)

var (
	// attack: attack_1 = [0]
	attack_1 = []float64{
		0.414,
		0.44505,
		0.4761,
		0.5175,
		0.54855,
		0.5796,
		0.621,
		0.6624,
		0.7038,
		0.7452,
		0.7866,
		0.828,
		0.87975,
		0.87975,
		0.87975,		
	}
	// attack: attack_2 = [1][2]
	attack_2 = [][]float64{
		{	
			0.204,
			0.2193,
			0.2346,
			0.255,
			0.2703,
			0.2856,
			0.306,
			0.3264,
			0.3468,
			0.3672,
			0.3876,
			0.408,
			0.4335,
			0.4335,
			0.4335,
		},
		{
			0.249,
			0.267675,
			0.28635,
			0.31125,
			0.329925,
			0.3486,
			0.3735,
			0.3984,
			0.4233,
			0.4482,
			0.4731,
			0.498,
			0.529125,
			0.529125,
			0.529125,
		},
	}
	// attack: attack_3 = [3][4]
	attack_3 =  [][]float64{
		{	
			0.269,
			0.289175,
			0.30935,
			0.33625,
			0.356425,
			0.3766,
			0.4035,
			0.4304,
			0.4573,
			0.4842,
			0.5111,
			0.538,
			0.571625,
			0.571625,
			0.571625,			
		},
		{
			0.269,
			0.289175,
			0.30935,
			0.33625,
			0.356425,
			0.3766,
			0.4035,
			0.4304,
			0.4573,
			0.4842,
			0.5111,
			0.538,
			0.571625,
			0.571625,
			0.571625,			
		},
	}
	// attack: attack_4 = [5]
	attack_4 = []float64{
		0.646,
		0.69445,
		0.7429,
		0.8075,
		0.85595,
		0.9044,
		0.969,
		1.0336,
		1.0982,
		1.1628,
		1.2274,
		1.292,
		1.37275,
		1.37275,
		1.37275,			
	}
	// attack: charge = [6]
	charge = []float64{
		0.378,
		0.40635,
		0.4347,
		0.4725,
		0.50085,
		0.5292,
		0.567,
		0.6048,
		0.6426,
		0.6804,
		0.7182,
		0.756,
		0.80325,
		0.80325,
		0.80325,			
	}
	// skill: skill = [0]
	skill = []float64{
		0.963,
		1.035225,
		1.10745,
		1.20375,
		1.275975,
		1.3482,
		1.4445,
		1.5408,
		1.6371,
		1.7334,
		1.8297,
		1.926,
		2.046375,
		2.046375,
		2.046375,			
	}
	// skill: shieldperct = [1]
	shieldperct = []float64{
		2.765,
		2.972375,
		3.17975,
		3.45625,
		3.663625,
		3.871,
		4.1475,
		4.424,
		4.7005,
		4.977,
		5.2535,
		5.53,
		5.875625,
		5.875625,
		5.875625,			
	}
	// skill: shieldconst = [2]
	shieldconst = []float64{
		1156,
		1271.6,
		1396.448,
		1531.7,
		1676.2,
		1829.948,
		1994.1,
		2167.5,
		2350.148,
		2543.2,
		2745.5,
		2958.204,
		3179,
		3179,
		3179,			
	}
	// burst: burst = [0]
	burst = []float64{
		2.411,
		2.591825,
		2.77265,
		3.01375,
		3.194575,
		3.3754,
		3.6165,
		3.8576,
		4.0987,
		4.3398,
		4.5809,
		4.822,
		5.123375,
		5.123375,
		5.123375,		
	}
)
