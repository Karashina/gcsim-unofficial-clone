// Code generated by "pipeline"; DO NOT EDIT.
package escoffier

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	5: {"collision"},
	6: {"collision"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Escoffier, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			if v == "movement" {
				return nil
			}
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}

var (
	attack = [][][]float64{
		{attack_1},
		{attack_2},
		attack_3,
	}
)

var (
	// attack: attack_1 = [0]
	attack_1 = []float64{
		0.516,
		0.557796,
		0.600108,
		0.659964,
		0.70176,
		0.749748,
		0.815796,
		0.881844,
		0.947892,
		1.020132,
		1.091856,
		1.164096,
		1.23582,
		1.23582,
		1.23582,		
	}
	// attack: attack_2 = [1]
	attack_2 = []float64{
		0.476,
		0.514556,
		0.553588,
		0.608804,
		0.64736,
		0.691628,
		0.752556,
		0.813484,
		0.874412,
		0.941052,
		1.007216,
		1.073856,
		1.14002,
		1.14002,
		1.14002,		
	}
	// attack: attack_3 = [2 3]
	attack_3 = [][]float64{
		{
			0.33,
			0.35673,
			0.38379,
			0.42207,
			0.4488,
			0.47949,
			0.52173,
			0.56397,
			0.60621,
			0.65241,
			0.69828,
			0.74448,
			0.79035,
			0.79035,
			0.79035,			
		},
		{
			0.403,
			0.435643,
			0.468689,
			0.515437,
			0.54808,
			0.585559,
			0.637143,
			0.688727,
			0.740311,
			0.796731,
			0.852748,
			0.909168,
			0.965185,
			0.965185,
			0.965185,			
		},
	}
	// attack: charge = [4]
	charge = []float64{
		1.154,
		1.247474,
		1.342102,
		1.475966,
		1.56944,
		1.676762,
		1.824474,
		1.972186,
		2.119898,
		2.281458,
		2.441864,
		2.603424,
		2.76383,
		2.76383,
		2.76383,		
	}
	// attack: collision = [6]
	collision = []float64{
		0.639324,
		0.691362,
		0.7434,
		0.81774,
		0.869778,
		0.92925,
		1.011024,
		1.092798,
		1.174572,
		1.26378,
		1.352988,
		1.442196,
		1.531404,
		1.620612,
		1.70982,
	}
	// attack: highPlunge = [8]
	highPlunge = []float64{
		1.596762,
		1.726731,
		1.8567,
		2.04237,
		2.172339,
		2.320875,
		2.525112,
		2.729349,
		2.933586,
		3.15639,
		3.379194,
		3.601998,
		3.824802,
		4.047606,
		4.27041,
	}
	// attack: lowPlunge = [7]
	lowPlunge = []float64{
		1.278377,
		1.382431,
		1.486485,
		1.635134,
		1.739187,
		1.858106,
		2.02162,
		2.185133,
		2.348646,
		2.527025,
		2.705403,
		2.883781,
		3.062159,
		3.240537,
		3.418915,
	}
	// skill: skill = [0]
	skill = []float64{
		0.504,
		0.5418,
		0.5796,
		0.63,
		0.6678,
		0.7056,
		0.756,
		0.8064,
		0.8568,
		0.9072,
		0.9576,
		1.008,
		1.071,
		1.071,
		1.071,		
	}
	// skill: skillCookingMek = [1]
	skillCookingMek = []float64{
		1.2,
		1.29,
		1.38,
		1.5,
		1.59,
		1.68,
		1.8,
		1.92,
		2.04,
		2.16,
		2.28,
		2.4,
		2.55,
		2.55,
		2.55,		
	}
	// skill: skillArkhe = [2]
	skillArkhe = []float64{
		0.336,
		0.3612,
		0.3864,
		0.42,
		0.4452,
		0.4704,
		0.504,
		0.5376,
		0.5712,
		0.6048,
		0.6384,
		0.672,
		0.714,
		0.714,
		0.714,				
	}
	// burst: burst = [0]
	burst = []float64{
		5.928,
		6.3726,
		6.8172,
		7.41,
		7.8546,
		8.2992,
		8.892,
		9.4848,
		10.0776,
		10.6704,
		11.2632,
		11.856,
		12.597,
		12.597,
		12.597,		
	}
	// burst: burstHealPct = [1]
	burstHealPct = []float64{
		1.72,
		1.849,
		1.978,
		2.15,
		2.279,
		2.408,
		2.58,
		2.752,
		2.924,
		3.096,
		3.268,
		3.44,
		3.655,
		3.655,
		3.655,		
	}
	// burst: burstHealCst = [2]
	burstHealCst = []float64{
		1079,
		1186.9,
		1303.432,
		1429.675,
		1564.55,
		1708.057,
		1861.275,
		2023.125,
		2193.607,
		2373.8,
		2562.625,
		2761.161,
		2967.25,
		2967.25,
		2967.25,		
	}
)
