// Code generated by "pipeline"; DO NOT EDIT.
package clorinde

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	1: {"illusion_delay"},
	5: {"collision"},
	6: {"collision"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Clorinde, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}

var (
	attack = [][][]float64{
		{attack_1},
		{attack_2},
		attack_3,
		attack_4,
		{attack_5},
	}
)

var (
	// attack: attack_1 = [0]
	attack_1 = []float64{
		0.515,
		0.556715,
		0.598945,
		0.658685,
		0.7004,
		0.748295,
		0.814215,
		0.880135,
		0.946055,
		1.018155,
		1.08974,
		1.16184,
		1.233425,
		1.233425,
		1.233425,
		
	}
	// attack: attack_2 = [1]
	attack_2 = []float64{
		0.342,
		0.369702,
		0.397746,
		0.437418,
		0.46512,
		0.496926,
		0.540702,
		0.584478,
		0.628254,
		0.676134,
		0.723672,
		0.771552,
		0.81909,
		0.81909,
		0.81909,
	}
	// attack: attack_3 = [2]
	attack_3 = [][]float64{
		{
			0.342,
			0.369702,
			0.397746,
			0.437418,
			0.46512,
			0.496926,
			0.540702,
			0.584478,
			0.628254,
			0.676134,
			0.723672,
			0.771552,
			0.81909,
			0.81909,
			0.81909,
			0.787577,
		},
		{
			0.342,
			0.369702,
			0.397746,
			0.437418,
			0.46512,
			0.496926,
			0.540702,
			0.584478,
			0.628254,
			0.676134,
			0.723672,
			0.771552,
			0.81909,
			0.81909,
			0.81909,
			0.787577,
		},
	}
	// attack: attack_4 = [3 3]
	attack_4 = [][]float64{
		{
			0.231,
			0.249711,
			0.268653,
			0.295449,
			0.31416,
			0.335643,
			0.365211,
			0.394779,
			0.424347,
			0.456687,
			0.488796,
			0.521136,
			0.553245,
			0.553245,
			0.553245,
		},
		{
			0.231,
			0.249711,
			0.268653,
			0.295449,
			0.31416,
			0.335643,
			0.365211,
			0.394779,
			0.424347,
			0.456687,
			0.488796,
			0.521136,
			0.553245,
			0.553245,
			0.553245,
		},
		{
			0.231,
			0.249711,
			0.268653,
			0.295449,
			0.31416,
			0.335643,
			0.365211,
			0.394779,
			0.424347,
			0.456687,
			0.488796,
			0.521136,
			0.553245,
			0.553245,
			0.553245,
		},
	}
	// attack: attack_5 = [4]
	attack_5 = []float64{
		0.9,
		0.9729,
		1.0467,
		1.1511,
		1.224,
		1.3077,
		1.4229,
		1.5381,
		1.6533,
		1.7793,
		1.9044,
		2.0304,
		2.1555,
		2.1555,
		2.1555,
	}
	// attack: ca = [5]
	ca = []float64{
		1.281,
		1.384761,
		1.489803,
		1.638399,
		1.74216,
		1.861293,
		2.025261,
		2.189229,
		2.353197,
		2.532537,
		2.710596,
		2.889936,
		3.067995,
		3.067995,
		3.067995,	
	}
	// attack: collision = [7]
	collision = []float64{
		0.639324,
		0.691362,
		0.7434,
		0.81774,
		0.869778,
		0.92925,
		1.011024,
		1.092798,
		1.174572,
		1.26378,
		1.352988,
		1.442196,
		1.531404,
		1.620612,
		1.70982,
	}
	// attack: highPlunge = [9]
	highPlunge = []float64{
		1.596762,
		1.726731,
		1.8567,
		2.04237,
		2.172339,
		2.320875,
		2.525112,
		2.729349,
		2.933586,
		3.15639,
		3.379194,
		3.601998,
		3.824802,
		4.047606,
		4.27041,
	}
	// attack: lowPlunge = [8]
	lowPlunge = []float64{
		1.278377,
		1.382431,
		1.486485,
		1.635134,
		1.739187,
		1.858106,
		2.02162,
		2.185133,
		2.348646,
		2.527025,
		2.705403,
		2.883781,
		3.062159,
		3.240537,
		3.418915,
	}
	// skill: shunsuiken = [0 1 2]
	swift = [][]float64{
		{
			0.268,
			0.289708,
			0.311684,
			0.342772,
			0.36448,
			0.389404,
			0.423708,
			0.458012,
			0.492316,
			0.529836,
			0.567088,
			0.604608,
			0.64186,
			0.64186,
			0.64186,
		},
		{
			0.388,
			0.419428,
			0.451244,
			0.496252,
			0.52768,
			0.563764,
			0.613428,
			0.663092,
			0.712756,
			0.767076,
			0.821008,
			0.875328,
			0.92926,
			0.92926,
			0.92926,
		},
	}
	// skill: skill = [5]
	impale = [][]float64{
		{
			0.33,
			0.35673,
			0.38379,
			0.42207,
			0.4488,
			0.47949,
			0.52173,
			0.56397,
			0.60621,
			0.65241,
			0.69828,
			0.74448,
			0.79035,
			0.79035,
			0.79035,
		},
		{
			0.44,
			0.47564,
			0.51172,
			0.56276,
			0.5984,
			0.63932,
			0.69564,
			0.75196,
			0.80828,
			0.86988,
			0.93104,
			0.99264,
			1.0538,
			1.0538,
			1.0538,		
		},
		{
			0.251,
			0.271331,
			0.291913,
			0.321029,
			0.34136,
			0.364703,
			0.396831,
			0.428959,
			0.461087,
			0.496227,
			0.531116,
			0.566256,
			0.601145,
			0.601145,
			0.601145,
		},
	}
	// skill: skillpp = [4]
	alkhe= []float64{
		0.432,
		0.4644,
		0.4968,
		0.54,
		0.5724,
		0.6048,
		0.648,
		0.6912,
		0.7344,
		0.7776,
		0.8208,
		0.864,
		0.918,
		0.918,
		0.918,
	}
	// burst: burst = [0]
	burst = []float64{
		1.269,
		1.364175,
		1.45935,
		1.58625,
		1.681425,
		1.7766,
		1.9035,
		2.0304,
		2.1573,
		2.2842,
		2.4111,
		2.538,
		2.696625,
		2.696625,
		2.696625,
	}
	// burst: burstatkp = [1]
	burstbol = []float64{
		0.66,
		0.70488,
		0.74976,
		0.80982,
		0.8547,
		0.9075,
		0.97482,
		1.0428,
		1.11012,
		1.17744,
		1.24476,
		1.31274,
		1.38006,
		1.38006,
		1.38006,		
	}
)
